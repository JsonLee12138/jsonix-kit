// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto(in *jlexer.Lexer, out *UsernameLoginWithCaptchaDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "captcha":
			out.Captcha = string(in.String())
		case "captchaId":
			out.CaptchaId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto(out *jwriter.Writer, in UsernameLoginWithCaptchaDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"captcha\":"
		out.RawString(prefix)
		out.String(string(in.Captcha))
	}
	{
		const prefix string = ",\"captchaId\":"
		out.RawString(prefix)
		out.String(string(in.CaptchaId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsernameLoginWithCaptchaDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsernameLoginWithCaptchaDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsernameLoginWithCaptchaDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsernameLoginWithCaptchaDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto(l, v)
}
func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto1(in *jlexer.Lexer, out *UsernameLoginDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto1(out *jwriter.Writer, in UsernameLoginDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsernameLoginDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsernameLoginDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsernameLoginDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsernameLoginDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto1(l, v)
}
func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto2(in *jlexer.Lexer, out *PhoneSMSLoginDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phone":
			out.Phone = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto2(out *jwriter.Writer, in PhoneSMSLoginDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix[1:])
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhoneSMSLoginDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhoneSMSLoginDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhoneSMSLoginDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhoneSMSLoginDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto2(l, v)
}
func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto3(in *jlexer.Lexer, out *EmailSMSLoginDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto3(out *jwriter.Writer, in EmailSMSLoginDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailSMSLoginDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailSMSLoginDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailSMSLoginDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailSMSLoginDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto3(l, v)
}
func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto4(in *jlexer.Lexer, out *AccountLoginWithCaptchaDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "captcha":
			out.Captcha = string(in.String())
		case "captchaId":
			out.CaptchaId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto4(out *jwriter.Writer, in AccountLoginWithCaptchaDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		out.String(string(in.Account))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"captcha\":"
		out.RawString(prefix)
		out.String(string(in.Captcha))
	}
	{
		const prefix string = ",\"captchaId\":"
		out.RawString(prefix)
		out.String(string(in.CaptchaId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountLoginWithCaptchaDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountLoginWithCaptchaDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountLoginWithCaptchaDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountLoginWithCaptchaDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto4(l, v)
}
func easyjson9af65625DecodeJsonServerKitAppsAuthModelDto5(in *jlexer.Lexer, out *AccountLoginDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeJsonServerKitAppsAuthModelDto5(out *jwriter.Writer, in AccountLoginDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		out.String(string(in.Account))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountLoginDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountLoginDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeJsonServerKitAppsAuthModelDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountLoginDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountLoginDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeJsonServerKitAppsAuthModelDto5(l, v)
}
