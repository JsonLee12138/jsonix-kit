// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity(in *jlexer.Lexer, out *DictType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(bool)
				}
				*out.Status = bool(in.Bool())
			}
		case "desc":
			out.Desc = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]DictItem, 0, 0)
					} else {
						out.Items = []DictItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 DictItem
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = uint(in.Uint())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "createdBy":
			out.CreatedBy = string(in.String())
		case "updatedBy":
			out.UpdatedBy = string(in.String())
		case "deletedBy":
			out.DeletedBy = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity(out *jwriter.Writer, in DictType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Status))
		}
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"updatedBy\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedBy))
	}
	{
		const prefix string = ",\"deletedBy\":"
		out.RawString(prefix)
		out.String(string(in.DeletedBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DictType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DictType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DictType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DictType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity(l, v)
}
func easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity1(in *jlexer.Lexer, out *DictItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "desc":
			out.Desc = string(in.String())
		case "sort":
			out.Sort = int(in.Int())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(bool)
				}
				*out.Status = bool(in.Bool())
			}
		case "classList":
			out.ClassList = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "isDefault":
			if in.IsNull() {
				in.Skip()
				out.IsDefault = nil
			} else {
				if out.IsDefault == nil {
					out.IsDefault = new(bool)
				}
				*out.IsDefault = bool(in.Bool())
			}
		case "dictTypeId":
			out.DictTypeId = uint(in.Uint())
		case "id":
			out.ID = uint(in.Uint())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "createdBy":
			out.CreatedBy = string(in.String())
		case "updatedBy":
			out.UpdatedBy = string(in.String())
		case "deletedBy":
			out.DeletedBy = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity1(out *jwriter.Writer, in DictItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		out.Int(int(in.Sort))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Status))
		}
	}
	{
		const prefix string = ",\"classList\":"
		out.RawString(prefix)
		out.String(string(in.ClassList))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"isDefault\":"
		out.RawString(prefix)
		if in.IsDefault == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsDefault))
		}
	}
	{
		const prefix string = ",\"dictTypeId\":"
		out.RawString(prefix)
		out.Uint(uint(in.DictTypeId))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"updatedBy\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedBy))
	}
	{
		const prefix string = ",\"deletedBy\":"
		out.RawString(prefix)
		out.String(string(in.DeletedBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DictItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DictItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9b48f8EncodeJsonServerKitAppsCommonEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DictItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DictItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9b48f8DecodeJsonServerKitAppsCommonEntity1(l, v)
}
